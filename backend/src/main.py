import asyncio
import logging
import sys

from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from aiogram.utils.media_group import MediaGroupBuilder
from bot.handlers import main_router
from bot.keyboards.register_kb import start_seacrh_kb
from bot.keyboards.start import main_kb
from bot.keyboards.edit_profile import edit_profile
from config import TOKEN
from database.models import UserWithPhotos
from fastapi import FastAPI, Request
from loader import bot, db, dp, app
import uvicorn
import uvloop
from utils.utils import get_profile

dp.include_router(main_router)


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    is_exist = await db.is_exist_user(message.from_user.id)

    if not is_exist:
        await message.answer(
            f"–ù–∞–∂–º–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É",
            reply_markup=main_kb,
        )
        return

    await message.answer(
        f"–î–∞–≤–∞–π—Ç–µ –≤–∞–º –Ω–∞–π–¥–µ–º –∫–æ–≥–æ-–Ω–∏–±—É–¥—å!", reply_markup=start_seacrh_kb
    )


@dp.message(Command("myprofile"))
async def get_my_profile(message: Message):
    await get_profile(message.from_user.id, message)
  
@dp.message(Command("profilesettings"))
async def profile_settings(message: Message):
    user: UserWithPhotos = await db.get_my_profile(message.from_user.id)

    if user is None:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É!", reply_markup=main_kb)
        return
    await message.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=edit_profile
    )
   

@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç:\n\n"
        "üîç –ù–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ª—é–¥–µ–π —Ä—è–¥–æ–º\n"
        "üíå –ê–Ω–æ–Ω–∏–º–Ω–æ –ø—Ä–æ—è–≤–ª—è—Ç—å —Å–∏–º–ø–∞—Ç–∏—é\n"
        "üì© –û–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø—Ä–∏ –≤–∑–∞–∏–º–Ω–æ–π –ª–∞–π–∫–µ\n\n"
        "- /start - –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫\n"
        "- /myprofile - –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞\n"
        "- /stop - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫\n"
        "üõ† –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - –ø–∏—à–∏—Ç–µ @Sweepyd1\n"
        "–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å –∏ —É–ª—É—á—à–∏—Ç—å –≤–∞—à –æ–ø—ã—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤! ‚ù§Ô∏è"
    )


async def run_bot():
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    await dp.start_polling(bot)

async def run_server():
    config = uvicorn.Config(app, host="0.0.0.0", port=8000)
    server = uvicorn.Server(config)
    await server.serve()

async def main():
    await asyncio.gather(
        run_server(),
        run_bot()
    )

if __name__ == "__main__":
    uvloop.install()

    asyncio.run(main())

